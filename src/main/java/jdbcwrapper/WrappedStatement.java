package jdbcwrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class WrappedStatement implements Statement {

	private final Statement wrappedStatement;

	public WrappedStatement(final Statement statement) {
		this.wrappedStatement = statement;
	}
	
	@Override
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		return this.wrappedStatement.unwrap(iface);
	}

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		return this.wrappedStatement.executeQuery(sql);
	}

	@Override
	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
		return this.wrappedStatement.isWrapperFor(iface);
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		return this.wrappedStatement.executeUpdate(sql);
	}

	@Override
	public void close() throws SQLException {
		this.wrappedStatement.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return this.wrappedStatement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		this.wrappedStatement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return this.wrappedStatement.getMaxRows();
	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		this.wrappedStatement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		this.wrappedStatement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return this.wrappedStatement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		this.wrappedStatement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		this.wrappedStatement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return this.wrappedStatement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		this.wrappedStatement.clearWarnings();
	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		this.wrappedStatement.setCursorName(name);
	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		return this.wrappedStatement.execute(sql);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return this.wrappedStatement.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return this.wrappedStatement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return this.wrappedStatement.getMoreResults();
	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		this.wrappedStatement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return this.wrappedStatement.getFetchDirection();
	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		this.wrappedStatement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return this.wrappedStatement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return this.wrappedStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return this.wrappedStatement.getResultSetType();
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		this.wrappedStatement.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		this.wrappedStatement.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return this.wrappedStatement.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.wrappedStatement.getConnection();
	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		return this.wrappedStatement.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return this.wrappedStatement.getGeneratedKeys();
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		return this.wrappedStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		return this.wrappedStatement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		return this.wrappedStatement.executeUpdate(sql, columnNames);
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		return this.wrappedStatement.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		return this.wrappedStatement.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(final String sql, final String[] columnNames) throws SQLException {
		return this.wrappedStatement.execute(sql, columnNames);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return this.wrappedStatement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return this.wrappedStatement.isClosed();
	}

	@Override
	public void setPoolable(final boolean poolable) throws SQLException {
		this.wrappedStatement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return this.wrappedStatement.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		this.wrappedStatement.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return this.wrappedStatement.isCloseOnCompletion();
	}	
	
}

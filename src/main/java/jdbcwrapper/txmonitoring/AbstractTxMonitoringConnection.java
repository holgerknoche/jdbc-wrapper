package jdbcwrapper.txmonitoring;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

import jdbcwrapper.WrappedConnection;
import jdbcwrapper.measurement.MeasuringConnection;
import jdbcwrapper.measurement.MeasuringPreparedStatement;
import jdbcwrapper.measurement.MeasuringStatement;

public abstract class AbstractTxMonitoringConnection extends WrappedConnection implements MeasuringConnection {

	private long startTime;

	private long busyTime;
	private int statementCount;

	private long statementStartTime;

	public AbstractTxMonitoringConnection(final Connection wrappedConnection) {
		super(wrappedConnection);
	}

	@Override
	public void setAutoCommit(final boolean enable) throws SQLException {
		super.setAutoCommit(enable);

		if (!enable) {
			this.onTransactionStart();
		}
	}

	private Statement wrapStatement(final Statement statement) {
		return new MeasuringStatement(statement, this);
	}

	private PreparedStatement wrapPreparedStatement(final PreparedStatement statement) {
		return new MeasuringPreparedStatement(statement, this);
	}

	@Override
	public Statement createStatement() throws SQLException {
		return this.wrapStatement(super.createStatement());
	}

	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
		return this.wrapStatement(super.createStatement(resultSetType, resultSetConcurrency));
	}

	@Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency,
			final int resultSetHoldability) throws SQLException {
		return this.wrapStatement(super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql) throws SQLException {
		return this.wrapPreparedStatement(super.prepareStatement(sql));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
		return this.wrapPreparedStatement(super.prepareStatement(sql, autoGeneratedKeys));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
			throws SQLException {
		return this.wrapPreparedStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency,
			final int resultSetHoldability) throws SQLException {
		return this.wrapPreparedStatement(
				super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
		return this.wrapPreparedStatement(super.prepareStatement(sql, columnIndexes));
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
		return this.wrapPreparedStatement(super.prepareStatement(sql, columnNames));
	}

	@Override
	public void commit() throws SQLException {
		this.onTransactionEnd(true);
		super.commit();
	}

	@Override
	public void rollback() throws SQLException {
		this.onTransactionEnd(false);
		super.rollback();
	}

	@Override
	public void rollback(final Savepoint savepoint) throws SQLException {
		this.onTransactionEnd(false);
		super.rollback(savepoint);
	}

	private void onTransactionStart() {
		int txId = this.getTransactionId();
		System.out.println(System.identityHashCode(this) + ": Transaction started with id " + txId + ".");

		// Reset the counters after getting the TX id as not to include it in the
		// figures
		this.startTime = System.currentTimeMillis();
		this.busyTime = 0;
		this.statementCount = 0;
	}

	private void onTransactionEnd(final boolean success) {
		long endTime = System.currentTimeMillis();
		long duration = endTime - this.startTime;

		float busyPercentage = (float) this.busyTime / (float) duration * 100f;

		System.out.println(System.identityHashCode(this) + ": Transaction ended, success: " + success);
		System.out.println(String.format("Took %dms, %d statements, %dms busy (%.4f%%).", duration, this.statementCount,
				this.busyTime, busyPercentage));
	}

	protected abstract int getTransactionId();

	@Override
	public void onStatementStart(final Statement statement) {
		this.statementStartTime = System.currentTimeMillis();
	}

	@Override
	public void onStatementEnd(final Statement statement) {
		long statementEndTime = System.currentTimeMillis();
		long duration = statementEndTime - this.statementStartTime;

		this.statementCount++;
		this.busyTime += duration;
	}

}
